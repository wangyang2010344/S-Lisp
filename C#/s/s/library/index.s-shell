{
	(
		(load (lib-path 'g_Lib/g_common.lisp))
		[
			k C#
			in-type Fun_BuildIn
			better-type Fun_Better
			build-cls
			    {
			        `
			            key
			            run
			            other 可选
			            toString
			            type
			        `
			        (let (p) args)
			        [
			            "\n
        class "(quote p.key)":Function{
            private static "(quote p.key)" _ini_=new "(quote p.key)"();
            public static "(quote p.key)" instance(){return _ini_;}
            public override string ToString(){return \"" (p.toString) "\";}
            public override Function_Type Function_type(){return Function.Function_Type."(quote p.type)";}
            public override object exec(Node<object> args){
                "(quote p.run)"
            }
            "(default p.other "")"
        }
			            "
			        ]
			    }
		    build-m 
			    {
			        (let (k key) args)
			        [
			            "
        m=Node<Object>.kvs_extend(\""(quote k)"\","(quote key)".instance(),m);"
			        ]
			    }
			write-result 
				{
					(let (cls fun) args)
					(write
				    	(pathOf './System.cs)
					    (str-join
					        [
"
using System;
using System.Collections.Generic;
using System.Text;

namespace s.library
{
    public class System
    {
        public static String toString(Object v, bool trans_str)
        {
            if (v == null)
            {
                return \"[]\";
            }
            else if (trans_str)
            {
                /*作为日志输出*/
                if (v is String)
                {
                    return Util.stringToEscape(v as String, '\"', '\"', null);
                }
                else
                {
                    return v.ToString();
                }
            }
            else
            {
                /*单纯转换*/
                return v.ToString();
            }
        }
    "
        (str-join cls)
    "
        public static Node<Object> library(){
            Node<Object> m = null;
            "
            (str-join fun)
            "
            return m;
        }
    }
}"        
	        
					        ]
					    )
					)
				}
		]
	)
}